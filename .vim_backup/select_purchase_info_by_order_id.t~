use strict;
use warnings;

use Test::More;
use Test::MockModule;
use Test::MockObject::Extends;
use Mixi::Test;
use Mixi::Test::Fixtures -checker => 'strict', qw(
    factory/DB_TOUCH_SKIN_PURCHASE
);
use Mixi::Skin::Touch::Purchase;
use Mixi::Skin::Touch::DB::Purchase;

my $entry = {
    order_id    => 123456789,
    product_id  => 1234,
    member_id   => 123456789,
    purchase_at => '2013-07-11 10:00:00'
};

Test::MockObject->fake_module('Mixi::Skin::Touch::DB::Purchase' =>
    'select_purchase_info_by_order_id' => sub {
        my $self = shift;
        return $entry;
    },
);

subtest "validate" => sub {
    eval {
        Mixi::Skin::Touch::Purchase->select_purchase_info_by_order_id();
    };
    ok($@, 'order_id is null');

    eval {
        Mixi::Skin::Touch::Purchase->select_purchase_info_by_order_id(
            order_id => 'hogehoge',
        );
    };
    ok($@, 'order_id is not number');
};

subtest "nomal" => sub {
    my $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_order_id(
        order_id => 123456789,
    );

    is_deeply($purchase_info, $entry);
};

done_testing;
