#!script/perl
use strict;
use Mixi::Warnings;
use utf8;

use Test::More;
use Test::Exception;
use Mixi::Test::Fixtures -checker => 'strict';
use Mixi::Test::DataFactory qw(
    Mixi::Skin::Touch::Store::CharacterTopBanner
);
use Nove::Test::Fixtures::Memcached;

BEGIN {
    use_ok 'Mixi::Skin::Touch::Store::CharacterTopBanner';
}

my $CHARACTER_TOP_BANNER_LIST = [
    {
        tag_id           => 1,
        top_image_url    => 'http://hogefuga.com/path/to/page1.html',
        bottom_image_url => 'http://img.mixi.net/img/touch_skin/piyopiyopiyo1.jpg',
        bottom_link_url  => 'http://hogehoge.com/to/image/1.jpg',
        bottom_text      => 'hello, character1',
    },
    {
        tag_id           => 2,
        top_image_url    => 'http://hogefuga.com/path/to/page2.html',
        bottom_image_url => 'http://img.mixi.net/img/touch_skin/piyopiyopiyo2.jpg',
        bottom_link_url  => 'http://hogehoge.com/to/image/2.jpg',
        bottom_text      => 'hello, character2'
    },
    {
        tag_id           => 3,
        top_image_url    => 'http://hogefuga.com/path/to/page3.html',
        bottom_image_url => 'http://img.mixi.net/img/touch_skin/piyopiyopiyo3.jpg',
        bottom_link_url  => 'http://hogehoge.com/to/image/3.jpg',
        bottom_text      => 'hello, character3'
    },
];

my $memcached = Nove::Test::Fixtures::Memcached->memcached_instance;

subtest 'get_list' => sub {
    _create_top_banner_list();

    my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->get_list;
    is_deeply(
        $result,
        $CHARACTER_TOP_BANNER_LIST,
        'should return character top banner list'
    );
};

subtest 'get_by_tag_id' => sub {
    _create_top_banner_list();
    %$memcached = ();

    my %params =( tag_id => 1 );
    my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->get_by_tag_id(%params);
    is_deeply(
        $result,
        @$CHARACTER_TOP_BANNER_LIST[0],
        'should return character top banner 1'
    );
    is_deeply(
        $result,
        $memcached->{'touchskin_store_character_top_banner:' . $params{tag_id}},
        'character top banner 1 should be cached'
    );
};

subtest 'add' => sub {
    _reset_db();

    subtest 'without empty data' => sub {
        my %params = (
            tag_id           => 323,
            top_image_url    => 'http://hogefuga.com/path/to/page23.html',
            bottom_image_url => 'http://img.mixi.net/img/touch_skin/piyopiyopiyo23.jpg',
            bottom_link_url  => 'http://hogehoge.com/to/image/2321.jpg',
            bottom_text      => 'hello, character1213',
        );
        my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->add(%params);
        ok($result, "should add character top banner");
    };

    subtest 'with empty data' => sub {
        my %params = (
            tag_id           => 23,
            top_image_url    => '',
            bottom_image_url => '',
            bottom_link_url  => '',
            bottom_text      => '',
        );
        my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->add(%params);
        ok($result, "should add character top banner");
    };
};

subtest 'edit' => sub {
    _create_top_banner_list();
    %$memcached = ('touchskin_store_character_top_banner:3' => 'DUMMY');

    my %params = (
        tag_id           => 3,
        top_image_url    => 'http://hogefuga.com/path/to/page23.html',
        bottom_image_url => 'http://img.mixi.net/img/touch_skin/piyopiyopiyo23.jpg',
        bottom_link_url  => 'http://hogehoge.com/to/image/2321.jpg',
        bottom_text      => 'hello, character1213'
    );
    my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->edit(%params);
    ok($result, 'character top banner 3 should be edited');
    is($memcached->{'touchskin_store_character_top_banner:3'}, undef, 'memcached should be cleared');
};

subtest 'remove' => sub {
    _create_top_banner_list();
    %$memcached = ('touchskin_store_character_top_banner:2' => 'DUMMY');

    my %params =( tag_id => 2 );
    my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->remove(%params);
    ok($result, 'should remove character top banner');
    is($memcached->{'touchskin_store_character_top_banner:2'}, undef, 'memcached should be cleared');
};

sub _reset_db {
    my $db_master = Mixi::Skin::Touch::Store::CharacterTopBanner->db({ role => 'master' });
    $db_master->connection->execute(q(
        DELETE FROM store_character_top_banner
    ));
}

sub _create_top_banner_list {
    _reset_db();
    foreach my $banner (@$CHARACTER_TOP_BANNER_LIST) {
        Mixi::Test::DataFactory->make('Mixi::Skin::Touch::Store::CharacterTopBanner', $banner);
    }
}

done_testing;
