package Mixi::Skin::Touch::Adapter::Procedure::Internal::Purchase::CallBack;

use strict;
use warnings;
use parent qw/Mixi::Service::Procedure::Base/;

#::<<common library>>
use Nove::Core::Data::Structure qw/
    TYPE_STRING
    TYPE_NUMBER
    define_struct
/;

#::<<service>>
use Mixi::Service::Procedure::InternalGateway;

#::<<framework>>
use Mixi;
use Mixi::Entity::Interface;

#::<<application>>
use Mixi::Skin::Touch::Purchase;

#::CONSTANTS
use constant {
    TYPE_CALL_BACK_REQUEST => define_struct(
        CALL_BACK_REQUEST => {
            pay_type        => [required => TYPE_STRING],
            order_id        => [required => TYPE_STRING],
            status          => [required => TYPE_STRING],
            cause           => [optional => TYPE_STRING],
            callback_time   => [required => TYPE_NUMBER],
        }
    ),
    TYPE_CALL_BACK_RESPONSE => define_struct(
        CALL_BACK_RESPONSE => {
            is_success => [required => TYPE_NUMBER],
        }
    ),

    #TODO 課金Uに必要なデータを登録依頼後に正しい値を入力する.
    SERVICE        => 'basic_internal',
    SUB_SERVICE_ID => {
        DEBUG      => 103,
        PRODUCTION => 4,
    },
};

__PACKAGE__->prefix('jp.mixi.skin.touch.purchase');

__PACKAGE__->assert_implements(
    Mixi::Entity::Interface::methods_of(qw/IPlatformParamsConverter/)
);


__PACKAGE__->validators(TYPE_CALL_BACK_REQUEST);

sub input_structure {
    return TYPE_CALL_BACK_REQUEST;
}

sub output_structure {
    return TYPE_CALL_BACK_RESPONSE;
}

=encoding utf-8

=head2 callback

    touch版ミクコレの有料ミクコレ購入の際にabisuからcallbackで呼ばれるプロシージャ

    購入者DBにどのミクコレを購入したかなどの情報を格納する

=cut

sub call {
    my $self = shift;

    my $purchase_info = $self->_get_purchase_info($self->params->{order_id});
    my $item = $purchase_info->{items};

    my $result = Mixi::Skin::Touch::Purchase->add_purchase_info(
        order_id    => $purchase_info->{order_id},
        product_id  => @$item[0]->{sku_id},
        member_id   => $purchase_info->{purchaser_id},
        purchase_at => $purchase_info->{created_datetime},
    );
    return {is_success => $result};
}

sub _get_purchase_info {
    my ($self, $order_id) = @_;

    my $sub_service_id = DEBUG() ?
        SUB_SERVICE_ID->{DEBUG} : SUB_SERVICE_ID->{PRODUCTION};

    return Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.payment.paymentsegment.client.ebisu.service.paytype.once.get', {
            params => {
                order_id       => $order_id,
                service        => SERVICE,
                sub_service_id => $sub_service_id,
            },
        }
    );
}

1;
