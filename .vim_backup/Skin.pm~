package Mixi::Skin::Touch::Adapter::Procedure::Skin;

use strict;
use warnings;
use utf8;
use parent qw/Mixi::Service::Procedure::Base/;

#::<<common library>>
use Nove::Core::Data::Structure qw/define_struct/;

#::<<framework>>
use Mixi::Entity::Format;
use Mixi::Entity::Domain::Response;

#::<<application>>
use Mixi::Skin::Touch;
use Mixi::Skin::Touch::Config qw/REVERSED_SKIN_COLOR/;
use Mixi::Skin::Touch::CPocket;

use constant TYPE_GET_BY_MEMBER_ID_REQUEST => define_struct(
    GET_BY_MEMBER_ID_REQUEST => {
        member_id => [ required => Mixi::Entity::Format::TYPE('MEMBER_ID') ],
    }
);

__PACKAGE__->methods({
    'jp.mixi.skin.touch.getByMemberId' => 'get_by_member_id',
});

__PACKAGE__->validators({
    'jp.mixi.skin.touch.getByMemberId' => [ TYPE_GET_BY_MEMBER_ID_REQUEST ],
});

sub get_by_member_id {
    my $self = shift;

    my $skin = Mixi::Skin::Touch->new->get_member_skin(member_id => $self->params->{member_id});
    return unless $skin;

    my $status = Mixi::Skin::Touch::CPocket->get_display_status_by_content_id(
        owner_id => $self->params->{member_id},
        content_id => $skin->{content_id},
    );
    return unless $status;
    # change skin_color_type from number to color text
    $skin->{skin_color_name} = lc REVERSED_SKIN_COLOR->{$skin->{skin_color_type}};
    my $skin_tieup_banner_url = $skin->{skin_base} . '/banner001.jpg';
    $skin->{skin_tieup_banner_url} = $skin_tieup_banner_url;
    return Mixi::Entity::Domain::Response->new(
        data => $skin
    );
}

1;

=head1 NAME

Mixi::Skin::Touch::Adapter::Procedure::Skin

=head1 SYNOPSYS

    Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.skin.touch.getByMemberId' => {
            params => {
                member_id  => $member_id,
            }
        }
    );

=cut
