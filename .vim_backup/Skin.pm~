package Mixi::Skin::Touch::DB::Skin;

use strict;
use warnings;
use parent qw/Class::Accessor::Fast/;

#::<<core library>>
use Nove::Core::DB::Handler;
use Nove::Core::DB::DSNResolver::MasterSlave;

#::<<common library>>
use Mixi::Config;

#::<<application>>
use Mixi::Skin::Touch::Config;

__PACKAGE__->mk_ro_accessors(qw/connection/);


sub new {
    my $class = shift;

    my $resolver = Nove::Core::DB::DSNResolver::MasterSlave->new(
        {
            master  => Mixi::Config::DB_TOUCHSKIN_MST,
            backup  => Mixi::Config::DB_TOUCHSKIN_BAK,
            slave   => Mixi::Config::DB_TOUCHSKIN_SLV,
        }
    );

    my $connection = Nove::Core::DB::Handler->new(
        {
            resolver => $resolver,
            charset => 'utf8',
            want_utf8_flaged_result => 1
        }
    )->handle(@_);

    return $class->SUPER::new( { connection => $connection });
}

sub begin {
    my $self = shift;
    $self->connection->begin(@_);
}

sub rollback {
    my $self = shift;
    $self->connection->rollback(@_);
}

sub end {
    my $self = shift;
    $self->connection->end(@_);
}

#
# touchskin_member_skin_relation
#

sub select_member_skin_id {
    my ($self, %args) = @_;
    $self->connection->select_one(q/
        SELECT skin_id
        FROM touchskin_member_skin_relation
        WHERE member_id = ?
    /,@args{qw/member_id/});
}

sub delete_member_skin_relation {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        DELETE FROM touchskin_member_skin_relation
        WHERE member_id = ?
     /,@args{qw/member_id/});
}

sub delete_member_skin_relation_by_skin_id {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        DELETE FROM touchskin_member_skin_relation
        WHERE skin_id = ?
     /,@args{qw/skin_id/});
}

sub insert_member_skin_relation {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        REPLACE INTO  touchskin_member_skin_relation SET
            member_id = ?,
            skin_id = ?
     /,@args{qw/member_id skin_id/});
}

#
# touchskin_skin_data
#

sub select_skins {
    my ($self, %args) = @_;
    my $sort = "";
    if($args{sort_key} and $args{sort_order}){
        $sort = $args{sort_key} . " " . $args{sort_order} . ",";
    }
    my $where_clause = '';
    my @bind_params = ();
    if (defined $args{skin_type}) {
        $where_clause = 'WHERE skin_type = ?';
        push @bind_params, $args{skin_type};
    }

    $self->connection->select_all(qq/
        SELECT *
        FROM touchskin_skin_data
        $where_clause
        ORDER BY $sort status,update_datetime DESC
    /, @bind_params);
}

sub select_skins_by_genre {
    my ($self, %args) = @_;

    my $sort = "";
    if($args{sort_key} and $args{sort_order}){
        $sort = "skin." . $args{sort_key} . " " . $args{sort_order} . ",";
    }
    my $where_clause = '';
    my @bind_params = ();
    if (defined $args{skin_type}) {
        $where_clause = 'WHERE skin_type = ? AND relation.genre_id = ?';
        push @bind_params, $args{skin_type}, $args{genre_id};
    } else {
        $where_clause = 'WHERE relation.genre_id = ?';
        push @bind_params, $args{genre_id};
    }

    $self->connection->select_all(qq/
        SELECT skin.*,genre.id AS genre_id
        FROM touchskin_skin_data skin JOIN touchskin_skin_genre_relation relation ON skin.id = relation.skin_id JOIN touchskin_genre_data genre ON relation.genre_id = genre.id
        $where_clause
        ORDER BY $sort skin.status, skin.open_datetime DESC
    /, @bind_params);
}

sub count_edit_skins_per_admin_status {
    my $self = shift;

    my $result = $self->connection->select_row(qq/
        SELECT
            SUM(status = ?) AS registration_count,
            SUM(status = ? AND open_datetime > NOW()) AS waiting_to_open_edit_count,
            SUM(status = ? AND open_datetime <= NOW() AND close_datetime >= NOW()) AS open_edit_count,
            SUM(status = ? AND close_datetime < NOW()) AS closed_edit_count
        FROM touchskin_skin_data
    /,
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{REGISTRATION},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
    return $result;
}


sub select_public_skins {
    my ($self, %args) = @_;

    my $limit = "";
    if(defined $args{offset} && defined $args{count}){
        $limit = sprintf("LIMIT %d,%d",$args{offset},$args{count});
    }

    return $self->connection->select_all(qq/
        SELECT id, skin_type, name, skin_version, contents_id, open_datetime
        FROM touchskin_skin_data
        WHERE status IN (?,?)
            AND open_datetime <= NOW()
            AND close_datetime >= NOW()
        ORDER BY open_datetime DESC, id DESC
        $limit
    /,
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub count_public_skins {
    my ($self, %args) = @_;

    return $self->connection->select_one(qq/
        SELECT COUNT(*)
        FROM touchskin_skin_data
        WHERE status IN (?,?)
            AND open_datetime <= NOW()
            AND close_datetime >= NOW()
    /,
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub select_public_skins_by_skin_type {
    my ($self, %args) = @_;

    my $limit = "";
    if(defined $args{offset} && defined $args{count}){
        $limit = sprintf("LIMIT %d,%d",$args{offset},$args{count});
    }

    return $self->connection->select_all(qq/
        SELECT id, skin_type, name, skin_version, contents_id, open_datetime
        FROM touchskin_skin_data
        WHERE skin_type = ?
            AND status IN(?,?)
            AND open_datetime <= NOW()
            AND close_datetime >= NOW()
        ORDER BY open_datetime DESC, id DESC
        $limit
    /,@args{qw/skin_type/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub count_public_skins_by_skin_type {
    my ($self, %args) = @_;

    return $self->connection->select_one(qq/
        SELECT COUNT(*)
        FROM touchskin_skin_data
        WHERE skin_type = ?
            AND status IN(?,?)
            AND open_datetime <= NOW()
            AND close_datetime >= NOW()
    /,@args{qw/skin_type/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub select_public_skins_by_genre {
    my ($self, %args) = @_;

    my $limit = "";
    if(defined $args{offset} && defined $args{count}){
        $limit = sprintf("LIMIT %d,%d",$args{offset},$args{count});
    }

    return $self->connection->select_all(qq/
        SELECT skin.id, skin.skin_type, skin.name, skin.skin_version, skin.contents_id, skin.open_datetime
        FROM touchskin_skin_data skin
            JOIN touchskin_skin_genre_relation relation ON skin.id = relation.skin_id
            JOIN touchskin_genre_data genre ON relation.genre_id = genre.id
        WHERE genre.id = ?
            AND skin.status IN (?,?)
            AND skin.open_datetime <= NOW()
            AND skin.close_datetime >= NOW()
        ORDER BY skin.open_datetime DESC, skin.id DESC
        $limit
    /,
    @args{qw/genre_id/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub count_public_skins_by_genre {
    my ($self, %args) = @_;

    return $self->connection->select_one(qq/
        SELECT COUNT(*)
        FROM touchskin_skin_data skin
            JOIN touchskin_skin_genre_relation relation ON skin.id = relation.skin_id
            JOIN touchskin_genre_data genre ON relation.genre_id = genre.id
        WHERE genre.id = ?
            AND skin.status IN (?,?)
            AND skin.open_datetime <= NOW()
            AND skin.close_datetime >= NOW()
    /,
    @args{qw/genre_id/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub select_public_skins_by_genre_and_skin_type {
    my ($self, %args) = @_;

    my $limit = "";
    if(defined $args{offset} && defined $args{count}){
        $limit = sprintf("LIMIT %d,%d",$args{offset},$args{count});
    }

    return $self->connection->select_all(qq/
        SELECT skin.id, skin.skin_type, skin.name, skin.skin_version, skin.contents_id, skin.open_datetime
        FROM touchskin_skin_data skin
            JOIN touchskin_skin_genre_relation relation ON skin.id = relation.skin_id
            JOIN touchskin_genre_data genre ON relation.genre_id = genre.id
        WHERE genre.id = ?
            AND skin.skin_type = ?
            AND skin.status IN (?,?)
            AND skin.open_datetime <= NOW()
            AND skin.close_datetime >= NOW()
        ORDER BY skin.open_datetime DESC, skin.id DESC
        $limit
    /,@args{qw/genre_id skin_type/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub count_public_skins_by_genre_and_skin_type {
    my ($self, %args) = @_;

    return $self->connection->select_one(qq/
        SELECT COUNT(*)
        FROM touchskin_skin_data skin
            JOIN touchskin_skin_genre_relation relation ON skin.id = relation.skin_id
            JOIN touchskin_genre_data genre ON relation.genre_id = genre.id
        WHERE genre.id = ?
            AND skin.skin_type = ?
            AND skin.status IN (?,?)
            AND skin.open_datetime <= NOW()
            AND skin.close_datetime >= NOW()
    /,@args{qw/genre_id skin_type/},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
    Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN_EDIT});
}

sub select_skin_by_id {
    my ($self, %args) = @_;
    $self->connection->select_row(q/
        SELECT *
        FROM touchskin_skin_data
        WHERE id = ?
    /,@args{qw/id/});
}

sub insert_skin {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        INSERT INTO
            touchskin_skin_data
        SET
            skin_type                = ?,
            status                   = ?,
            name                     = ?,
            regist_staff             = ?,
            regist_datetime          = NOW(),
            open_datetime            = ?,
            close_datetime           = ?,
            skin_color_type          = ?,
            skin_color_data          = ?,
            memo                     = ?,
            contents_id              = ?,
            has_home_header_img      = ?,
            has_prof_header_img      = ?,
            has_bg_img               = ?,
            has_contents_title_img   = ?,
            has_logo_jack            = ?,
            has_banner_img           = ?,
            banner_link              = ?,
            basic_text_color         = ?,
            strong_text_color        = ?,
            weak_text_color          = ?,
            weaker_text_color        = ?,
            link_color               = ?,
            strong_link_color        = ?,
            border_color             = ?,
            background_color         = ?,
            partial_background_color = ?,
            contents_title_bg_color  = ?,
            gradation_start_color    = ?,
            gradation_end_color      = ?
    /,@args{qw/
        skin_type
        status
        name
        regist_staff
        open_datetime
        close_datetime
        skin_color_type
        skin_color_data
        memo
        contents_id
        has_home_header_img
        has_prof_header_img
        has_bg_img
        has_contents_title_img
        has_logo_jack
        has_banner_img
        banner_link
        basic_text_color
        strong_text_color
        weak_text_color
        weaker_text_color
        link_color
        strong_link_color
        border_color
        background_color
        partial_background_color
        contents_title_bg_color
        gradation_start_color
        gradation_end_color
    /});
    return $self->connection->last_insert_id();
}

sub update_skin_basic_info {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        UPDATE
            touchskin_skin_data
        SET
            skin_type = ?,
            status = ?,
            name = ?,
            update_staff = ?,
            open_datetime = ?,
            close_datetime = ?,
            skin_color_data = ?,
            memo = ?,
            skin_version = ?,
            contents_id = ?,
            temporary_skin_info = ?
        WHERE id = ?
    /,@args{qw/
        skin_type
        status
        name
        update_staff
        open_datetime
        close_datetime
        skin_color_data
        memo
        skin_version
        contents_id
        temporary_skin_info
        id
    /});
}

sub update_skin {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        UPDATE
            touchskin_skin_data
        SET
            skin_type                = ?,
            status                   = ?,
            name                     = ?,
            update_staff             = ?,
            open_datetime            = ?,
            close_datetime           = ?,
            skin_color_type          = ?,
            skin_color_data          = ?,
            memo                     = ?,
            skin_version             = ?,
            temporary_skin_info      = ?,
            contents_id              = ?,
            has_home_header_img      = ?,
            has_prof_header_img      = ?,
            has_bg_img               = ?,
            has_contents_title_img   = ?,
            has_logo_jack            = ?,
            has_banner_img           = ?,
            banner_link              = ?,
            basic_text_color         = ?,
            strong_text_color        = ?,
            weak_text_color          = ?,
            weaker_text_color        = ?,
            link_color               = ?,
            strong_link_color        = ?,
            border_color             = ?,
            background_color         = ?,
            partial_background_color = ?,
            contents_title_bg_color  = ?,
            gradation_start_color    = ?,
            gradation_end_color      = ?
        WHERE id = ?
    /,@args{qw/
        skin_type
        status
        name
        update_staff
        open_datetime
        close_datetime
        skin_color_type
        skin_color_data
        memo
        skin_version
        temporary_skin_info
        contents_id
        has_home_header_img
        has_prof_header_img
        has_bg_img
        has_contents_title_img
        has_logo_jack
        has_banner_img
        banner_link
        basic_text_color
        strong_text_color
        weak_text_color
        weaker_text_color
        link_color
        strong_link_color
        border_color
        background_color
        partial_background_color
        contents_title_bg_color
        gradation_start_color
        gradation_end_color
        id
    /});
}

sub update_skin_status_and_temp {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        UPDATE touchskin_skin_data SET
            temporary_skin_info = ?,
            status = ?,
            update_staff = ?
        WHERE id = ?
     /,@args{qw/temporary_skin_info status update_staff id/});
}

#
# touchskin_genre_data
#

sub select_public_genres {
    my ($self, %args) = @_;
    $self->connection->select_all(q/
        SELECT id,genre_name
        FROM touchskin_genre_data
        WHERE display = 'y'
        ORDER BY priority DESC, id DESC
    /);
}

sub select_all_genres_with_limit {
    my ($self, %args) = @_;
    $self->connection->select_all(q/
        SELECT *
        FROM touchskin_genre_data
        ORDER BY display DESC, priority DESC, id DESC
        LIMIT ?,?
    /,@args{qw/offset limit/});
}

sub select_all_genres {
    my ($self, %args) = @_;
    $self->connection->select_all(q/
        SELECT *
        FROM touchskin_genre_data
        ORDER BY display DESC, priority DESC, id DESC
    /);
}

sub select_genre_by_id {
    my ($self, %args) = @_;
    $self->connection->select_row(q/
        SELECT *
        FROM touchskin_genre_data
        WHERE id = ?
    /,@args{qw/id/});
}

sub select_genre_by_name {
    my ($self, %args) = @_;
    $self->connection->select_row(q/
        SELECT *
        FROM touchskin_genre_data
        WHERE genre_name = ?
    /,@args{qw/genre_name/});
}

sub select_genre_by_skin_id {
    my ($self, %args) = @_;
    $self->connection->select_all(q/
        SELECT genre.id,genre.genre_name
        FROM touchskin_genre_data genre JOIN touchskin_skin_genre_relation relation ON genre.id = relation.genre_id
        WHERE relation.skin_id = ?
        ORDER BY priority DESC, genre.id DESC
    /,@args{qw/skin_id/});
}

sub select_public_genres_by_skin_id {
    my ($self, %args) = @_;
    $self->connection->select_all(q/
        SELECT genre.id,genre.genre_name
        FROM touchskin_genre_data genre JOIN touchskin_skin_genre_relation relation ON genre.id = relation.genre_id
        WHERE relation.skin_id = ? AND display = 'y'
        ORDER BY priority DESC, genre.id DESC
    /,@args{qw/skin_id/});
}

sub insert_genre {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        INSERT INTO touchskin_genre_data SET
            genre_name = ?,
            display = ?,
            priority = ?,
            regist_staff = ?,
            regist_datetime = ?
     /,@args{qw/genre_name display priority regist_staff regist_datetime/});
}

sub update_genre {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        UPDATE touchskin_genre_data SET
            genre_name = ?,
            display = ?,
            priority = ?
        WHERE id = ?
     /,@args{qw/genre_name display priority id/});
}

sub delete_genre {
    my ($self, %args) = @_;
    $self->connection->execute(q/
       DELETE FROM touchskin_genre_data
        WHERE id = ?
     /,@args{qw/id/});
}

#
# touchskin_skin_genre_relation
#

sub insert_skin_genre_relation {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        REPLACE INTO touchskin_skin_genre_relation SET
            skin_id = ?,
            genre_id = ?
     /,@args{qw/skin_id genre_id/});
}

sub delete_skin_genre_relation {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        DELETE FROM touchskin_skin_genre_relation
        WHERE skin_id = ?
     /,@args{qw/skin_id/});
}

sub delete_skin_genre_relation_by_genre {
    my ($self, %args) = @_;
    $self->connection->execute(q/
        DELETE FROM touchskin_skin_genre_relation
        WHERE genre_id = ?
     /,@args{qw/genre_id/});
}

sub count_genre_skins {
    my ($self, %args) = @_;
    $self->connection->select_one(q/
        SELECT count(*)
        FROM touchskin_skin_genre_relation
        WHERE genre_id = ?
     /,@args{qw/genre_id/});
}

sub select_skins_by_contents_ids {
    my ($self, %args) = @_;

    my $contents_ids_place_holder = '?,' x scalar(@{$args{contents_ids}});
    chop($contents_ids_place_holder);

    $self->connection->select_all(qq/
        SELECT id, skin_type, name, skin_version, contents_id, open_datetime
        FROM touchskin_skin_data
        WHERE contents_id IN ($contents_ids_place_holder)
        ORDER BY open_datetime DESC, id DESC
    /, @{$args{contents_ids}});
}

1;
