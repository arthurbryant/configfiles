package Mixi::Skin::Touch::Controller::Admin::Store::ManagePickup;

use strict;
use warnings;
use utf8;

use List::MoreUtils qw/all/;

use Mixi::Pages;
use Mixi::Skin::Touch::Admin;
use Mixi::Skin::Touch::Store::Pickup;

use constant {
    MAX_ROWS => 10,
    EXCEED_MAX_ROWS_MESSAGE => '10件を超えて登録することはできません',
    INVALID_CONTENT_ID_MESSAGE => 'ミクコレ情報に登録されていないコンテンツIDが指定されました',
    SKIN_NAME_FOR_INVALID_CONTENT_ID => '（コンテンツID未登録）',
    SUCCEEDED_TO_SET_MESSAGE => '保存しました',
    FAILED_TO_SET_MESSAGE => '保存に失敗しました',
};

__PACKAGE__->use_perlstring(1);
__PACKAGE__->auth_type(AUTH_UNREQUIRED);
__PACKAGE__->is_admin(1);
__PACKAGE__->charset('euc-jp');
__PACKAGE__->initial_params(
    mode => 'main',
);

__PACKAGE__->validation(
    _default => [
        mode => [[IN_ARRAY => qw/main confirm finish success/]],
    ],
    submit => [
        pickup_id_list => ['NOT_BLANK'],
        postkey        => [['POSTKEY', qw/_ENV_REMOTE_USER_ _TIMESTAMP_/]],
    ],
);

__PACKAGE__->assign(
    main    => [\&assign_common, \&assign_postkey],
    confirm => [\&assign_common, \&assign_postkey],
    finish  => [\&assign_common],
);

__PACKAGE__->templates(
    main    => 'touch/manage_pickup_main.tmpl',
    confirm => 'touch/manage_pickup_confirm.tmpl',
);

__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if $self->has_error;

        my $skin_module = Mixi::Skin::Touch::Admin->new;
        $self->stash->{skin_module}         = $skin_module;
        $self->stash->{edit_skin_count_map} = $skin_module->get_edit_skin_count();

        if ($self->mode eq 'success') {
            $self->stash->{success_message} = SUCCEEDED_TO_SET_MESSAGE;
            $self->mode('main');
        }
    },
    -main => sub {
        my $self = shift;

        $self->stash->{pickup_id_list} = $self->param->{pickup_id_list}
            // Mixi::Skin::Touch::Store::Pickup->get_content_id_list;
        $self->assign_and_check_pickup_list_stash;

        return FIXED;
    },
    -confirm => sub {
        my $self = shift;
        return $self->alert if $self->has_error('submit');

        $self->stash->{pickup_id_list} = $self->param->{pickup_id_list};
        $self->assign_and_check_pickup_list_stash;

        return FIXED;
    },
    -finish => sub {
        my $self = shift;
        return $self->alert if $self->has_error('submit');

        $self->stash->{pickup_id_list} = $self->param->{pickup_id_list};
        my $check_result = $self->assign_and_check_pickup_list_stash;
        return FIXED unless $check_result;

        my $update_result = Mixi::Skin::Touch::Store::Pickup->set_content_id_list(
            $self->param->{pickup_id_list}
        );
        unless ($update_result) {
            $self->stash->{error_message} = FAILED_TO_SET_MESSAGE;
            $self->mode('confirm');
            return FIXED;
        }

        return $self->redirect('manage_pickup.pl?mode=success');
    },
);

sub assign_and_check_pickup_list_stash {
    my $self = shift;

    unless ($self->assign_pickup_list_stash) {
        $self->stash->{error_message} = INVALID_CONTENT_ID_MESSAGE;
        $self->mode('main');
        return 0;
    }

    if (scalar @{$self->stash->{pickup_list}} > MAX_ROWS) {
        $self->stash->{error_message} = EXCEED_MAX_ROWS_MESSAGE;
        $self->mode('main');
        return 0;
    }

    return 1;
}

sub assign_pickup_list_stash {
    my $self = shift;

    my $pickup_id_list = $self->stash->{pickup_id_list};
    my $pickup_list = $self->_get_pickup_list_by_content_id_list($pickup_id_list);
    $self->stash->{pickup_list} = $pickup_list;

    return all { $_->{is_valid} } @$pickup_list;
}

sub assign_common {
    my $self = shift;

    $self->template->param(
        %{$self->stash->{edit_skin_count_map}},
        pickup_list     => $self->stash->{pickup_list},
        success_message => $self->stash->{success_message},
        error_message   => $self->stash->{error_message},
    );
}

sub assign_postkey {
    my $self = shift;

    $self->template->param(
        post_key => $self->post_key->encode([qw/_ENV_REMOTE_USER_ _TIMESTAMP_/]),
    );
}

sub _get_pickup_list_by_content_id_list {
    my ($self, $pickup_id_list) = @_;

    my $skin_module = $self->stash->{skin_module};
    my $skin_map = $skin_module->get_skin_map_by_content_ids(
        content_ids => $pickup_id_list
    );

    return [
        map {
            my $content_id = $_;
            my $skin = $skin_map->{$_};
            if (defined $skin) {
                my $image_url_data = $skin_module->get_image_url_data($skin, [qw/thumbnail/]);
                +{
                    %$image_url_data,
                    content_id => $content_id,
                    skin_id    => $skin->{id},
                    skin_name  => $skin->{name},
                    is_valid   => 1,
                }
            } else {
                +{
                    content_id => $content_id,
                    skin_id    => '',
                    skin_name  => SKIN_NAME_FOR_INVALID_CONTENT_ID,
                    is_valid   => 0,
                }
            }
        } @$pickup_id_list
    ];
}

1;
