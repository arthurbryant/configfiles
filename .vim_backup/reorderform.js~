Namespace('jp.mixi.skin.touch.admin.widget.reorderform')
.define(function(ns) {
    /*global $j:false, _:false*/
    'use strict';

    var KEY_CODE_ENTER = 13;
    var NODE_TYPE_COMMENT = 8;

    var createReOrderForm = function(element, dataset) {
        var root = $j(element);

        var rowCounter   = root.find('.JS_rowCounter');
        var upButton     = root.find('.JS_upButton');
        var downButton   = root.find('.JS_downButton');
        var topButton    = root.find('.JS_topButton');
        var bottomButton = root.find('.JS_bottomButton');
        var removeButton = root.find('.JS_removeButton');
        var addButton    = root.find('.JS_addButton');
        var addInput     = root.find('.JS_addInput');
        var submitButton = root.find('.JS_submitButton');
        var tableBody    = root.find('.JS_tableBody');
        var rowSkelton   = root.find('.JS_rowSkelton').contents().get(0).nodeValue;

        var onUpdateRows = function() {
            rowCounter.text(tableBody.find('tr').length);
        };

        var getCheckedRows = function() {
            return tableBody.find('tr').has('input:checked');
        };

        var addRow = function(contentId) {
            if ($j(_.str.sprintf('.JS_value[value=%d]', contentId)).length > 0) return;
            var row = $j(rowSkelton);
            row.find('.JS_value').attr('value', contentId);
            row.find('.JS_label').text(contentId);
            tableBody.append(row);
            onUpdateRows();
        };

        var onPressAddButton = function() {
            var contentId = _.str.trim(addInput.val());
            if (!contentId.match(/^[1-9][0-9]*$/)) {
                return;
            }
            addRow(parseInt(contentId, 10));
            addInput.val('');
        };

        addButton.on('click', onPressAddButton);
        addInput.on('keypress', function(e) {
            if (e.keyCode === KEY_CODE_ENTER) {
                e.preventDefault();
                onPressAddButton();
            }
        });

        removeButton.on('click', function() {
            getCheckedRows().each(function() {
                var row = $j(this);
                row.remove();
            });
            onUpdateRows();
        });

        topButton.on('click', function() {
            getCheckedRows().prependTo(tableBody);
        });

        bottomButton.on('click', function() {
            getCheckedRows().appendTo(tableBody);
        });

        upButton.on('click', function() {
            var unmovableRow;
            _.each(getCheckedRows().get(), function(value) {
                var row = $j(value);
                var prevRow = row.prev();
                if(prevRow.length === 0 || prevRow.is(unmovableRow)) {
                    unmovableRow = row;
                    return;
                }
                row.insertBefore(prevRow);
            });
        });

        downButton.on('click', function() {
            var unmovableRow;
            _.each(getCheckedRows().get().reverse(), function(value) {
                var row = $j(value);
                var nextRow = row.next();
                if(nextRow.length === 0 || nextRow.is(unmovableRow)) {
                    unmovableRow = row;
                    return;
                }
                row.insertAfter(nextRow);
            });
        });

        tableBody.on('click', 'tr', function(e) {
            var checkbox = $j(this).find('input[type=checkbox]');
            if (checkbox.is(e.target)) return;
            checkbox.prop('checked', !checkbox.prop('checked')).trigger('change');
        });

        tableBody.find('input[type=checkbox]').on('change', function() {
            if (this.checked) {
                $j(this).closest('tr').addClass('selected');
            } else {
                $j(this).closest('tr').removeClass('selected');
            }
        });

        onUpdateRows();
    };

    ns.provide({
        registerElement : createReOrderForm
    });
});
