use strict;
use warnings;

use Test::More;
use Test::Deep;
use Test::MockTime;

use Mixi::Test::Fixtures -checker => 'strict';
use Nove::Test::Fixtures::Memcached;
use Mixi::Test::DataFactory qw(
    Mixi::Member
    Mixi::Skin::Touch::SkinData
);
use Mixi::Test::Mock::Service::Procedure;

use Mixi::Skin::Touch::Config;
use Mixi::Skin::Touch;

BEGIN {
    use_ok 'Mixi::Skin::Touch::CPocket';
}

my $memcached = Nove::Test::Fixtures::Memcached->memcached_instance;

subtest 'get_display_status_by_content_id' => sub {
    my $content_id = 25;
    my $member_id  = 1234;
    my $skin_id    = 1111;

    my $skin = Mixi::Test::DataFactory->make('Mixi::Skin::Touch::SkinData', {
        content_id => $content_id,
        id         => $skin_id,
    });

    subtest 'can display content' => sub {

        my $procedure_mock = Mixi::Test::Mock::Service::Procedure->mock(
            internal => 'jp.mixi.cpocket.accessibility.getDisplayStatus',
            sub {
                my ($self, $params) = @_;
                cmp_deeply($params, {
                    content_ids    => [$content_id],
                    application_id => ignore(),
                    owner_id => $member_id,
                }, 'valid params should be passed to procedure');

                return {
                    list => [
                        {
                            content_id  => 25,
                            can_display => 1,
                        }
                    ]
                };
            }
        );

        my $result = Mixi::Skin::Touch::CPocket->get_display_status_by_content_id(
            owner_id => $member_id,
            content_id => $content_id
        );

        is($result, 1, 'should return true');
    };

    subtest 'cannot display content' => sub {

        my $procedure_mock = Mixi::Test::Mock::Service::Procedure->mock(
            internal => 'jp.mixi.cpocket.accessibility.getDisplayStatus',
            sub {
                my ($self, $params) = @_;
                cmp_deeply($params, {
                    content_ids    => [$content_id],
                    application_id => ignore(),
                    owner_id => $member_id,
                }, 'valid params should be passed to procedure');

                return {
                    list => [
                        {
                            content_id  => 25,
                            can_display => 0,
                        }
                    ]
                };
            }
        );

        my $result = Mixi::Skin::Touch::CPocket->get_display_status_by_content_id(
            owner_id => $member_id,
            content_id => $content_id
        );

        is($result, 0, 'should return false');
    };

    subtest 'cannot display in CPocket but recorded in legacy' => sub {

        my $skin = Mixi::Test::DataFactory->make('Mixi::Skin::Touch::Purchase', {
            product_id => $skin_id,
            member_id  => $member_id,
        });

        my $procedure_mock = Mixi::Test::Mock::Service::Procedure->mock(
            internal => 'jp.mixi.cpocket.accessibility.getDisplayStatus',
            sub {
                my ($self, $params) = @_;
                cmp_deeply($params, {
                    content_ids    => [$content_id],
                    application_id => ignore(),
                    owner_id => $member_id,
                }, 'valid params should be passed to procedure');

                return {
                    list => [
                        {
                            content_id  => 25,
                            can_display => 0,
                        }
                    ]
                };
            }
        );

        my $result = Mixi::Skin::Touch::CPocket->get_display_status_by_content_id(
            owner_id => $member_id,
            content_id => $content_id
        );

        is($result, 1, 'should return true');
    };
};

done_testing;
