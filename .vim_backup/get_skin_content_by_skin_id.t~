use strict;
use warnings;

use Test::More;
use Test::Deep;
use Test::MockTime;
use Test::MockTime::DateCalc;

use Date::Calc;

use Mixi::Test::Fixtures -checker => 'strict';
use Nove::Test::Fixtures::Memcached;
use Mixi::Test::DataFactory qw(
    Mixi::Member
    Mixi::Skin::Touch::SkinData
);
use Mixi::Test::Mock::Service::Procedure;

use Mixi::Skin::Touch::Config;
use Mixi::Skin::Touch;

BEGIN {
    use_ok 'Mixi::Skin::Touch::CPocket';
}

my $memcached = Nove::Test::Fixtures::Memcached->memcached_instance;

Test::MockTime::set_fixed_time(Date::Calc::Mktime(2013, 8, 1, 1, 2, 3));

subtest 'basic' => sub {
    my $skin = Mixi::Test::DataFactory->make('Mixi::Skin::Touch::SkinData', {
        id             => 12345,
        skin_version   => 2,
        content_id     => 25,
        status         => Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
        open_datetime  => '2013-04-01 15:00:00',
        close_datetime => '9999-12-31 23:59:59',
    });

    my $member    = Mixi::Test::DataFactory->make_object('Mixi::Member');
    my $member_id = $member->id;
    my $content   = _content(25);

    my $procedure_mock = Mixi::Test::Mock::Service::Procedure->mock(
        internal => 'jp.mixi.cpocket.store.getContentListByContentId',
        sub {
            my ($self, $params) = @_;
            is($self->requester_id, $member_id, 'requester_id should be passed correctly');
            cmp_deeply($params, {
                content_ids    => [25],
                application_id => ignore(),
                service_id     => ignore(),
            }, 'valid params should be passed to procedure');

            return {
                total_results => 1,
                content_list  => [
                    $content,
                ],
            }
        }
    );

    my $result = Mixi::Skin::Touch::CPocket->get_skin_content_by_skin_id(
        member_id => $member_id,
        skin_id   => 12345,
    );

    my $skin_base = Mixi::Skin::Touch->_make_skin_base(@{$skin}{qw/id skin_version/});
    cmp_deeply(
        $result,
        {
            total_results => 1,
            content_list  => [
                {
                    %$content,
                    skin_base => $skin_base,
                },
            ]
        },'should return valid structure with skin_base'
    );
};

subtest 'skin without content_id' => sub {
    my $skin = Mixi::Test::DataFactory->make('Mixi::Skin::Touch::SkinData', {
        id             => 12346,
        skin_version   => 2,
        content_id     => undef,
        status         => Mixi::Skin::Touch::Config::SKIN_STATUS_DB->{CAN_OPEN},
        open_datetime  => '2013-04-01 15:00:00',
        close_datetime => '9999-12-31 23:59:59',
    });

    my $member    = Mixi::Test::DataFactory->make_object('Mixi::Member');
    my $member_id = $member->id;
    my $called = 0;

    my $procedure_mock = Mixi::Test::Mock::Service::Procedure->mock(
        internal => 'jp.mixi.cpocket.store.getContentListByContentId',
        sub {
            $called = 1;
            return;
        }
    );

    my $result = Mixi::Skin::Touch::CPocket->get_skin_content_by_skin_id(
        member_id => $member_id,
        skin_id   => 12345,
    );
    is($result, undef, 'should return undef');
    ok(!$called, 'procedure should not be called');
};

sub _content {
    my $content_id = shift;
    {
        object_type  => "content_for_sale",
        content_id   => $content_id,
        content_name => "くまモンの夏休み",
        description  => "ゆるキャラくまモンの夏休みバージョンのミクコレです。",
        tags => [
            { id => "1234", name => "くまモン" },
            { id => "2222", name => "くまモンの夏休み" }
        ],
        provider  => { id => 111, name => "熊本県広報課" },
        copyright => "(c)2010熊本県くまモン#99999",
        price     => 105,
        selling_begin_at => "2013-01-30 23:59:59",
        selling_end_at   => "2013-09-30 23:59:59",
        use_by  => "2013-12-31 23:59:59",
        has_stock_limit => 0,
        consumable_type => "nonconsumable"
    }
}

Test::MockTime::restore();

done_testing;
