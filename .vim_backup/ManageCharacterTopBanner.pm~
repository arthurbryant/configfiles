package Mixi::Skin::Touch::Controller::Admin::Store::ManageCharacterTopBanner;

use strict;
use warnings;
use utf8;

use Mixi::Pages;
use Mixi::Skin::Touch::Admin;
use Mixi::Skin::Touch::Store::CharacterTopBanner;

use constant {
    SUCCEEDED_TO_SAVE_MESSAGE => '保存しました',
    FAILED_TO_SAVE_MESSAGE    => '保存に失敗しました',
};

__PACKAGE__->use_perlstring(1);
__PACKAGE__->auth_type(AUTH_UNREQUIRED);
__PACKAGE__->is_admin(1);
__PACKAGE__->charset('euc-jp');

__PACKAGE__->validation(
    _default => [
        mode => [
            'NOT_BLANK',
            [IN_ARRAY => qw(
                add add_confirm add_commit add_cancel
                edit edit_confirm edit_commit edit_cancel
                remove remove_commit
            )],
        ],
    ],
    postkey => [
        postkey  => [['POSTKEY', qw/_ENV_REMOTE_USER_ _TIMESTAMP_/]],
    ],
<<<<<<< Updated upstream
=======
    add => [
        # TODO: check tag_id existence
        # (Currently calling cpocket procedures without member_id is not supported.)
        tag_id           => ['NOT_BLANK', 'POSITIVEINT', ['CUSTOM', &validate_duplicate_tag_id]],
        top_image_url    => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_image_url => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_link_url  => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_text      => [['LENGTH', 0, 1000]],
    ],
>>>>>>> Stashed changes
    edit => [
        tag_id => ['NOT_BLANK', 'POSITIVEINT'],
    ],
    add_submit => [
        tag_id => [['CUSTOM', \&validate_not_registered_tag_id]],
    ],
    submit => [
        # TODO: check tag_id existence when add
        # (Currently calling cpocket procedures without member_id is not supported.)
        tag_id           => ['NOT_BLANK', 'POSITIVEINT'],
        top_image_url    => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_image_url => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_link_url  => ['HTTP_URL', ['LENGTH', 0, 255]],
        bottom_text      => [['LENGTH', 0, 1000]],
    ],
    remove_submit => [
        tag_id => ['NOT_BLANK', 'POSITIVEINT'],
    ],
);

__PACKAGE__->warnings([
    tag_id => [
        'NOT_BLANK'   => 'タグIDが不正です。',
        'POSITIVEINT' => 'タグIDが不正です。',
        'CUSTOM'      => '指定されたタグIDは既に登録されています。'
    ],
    top_image_url => [
        'HTTP_URL' => 'タイトルバナー画像URLが不正です。',
        'LENGTH'   => 'タイトルバナー画像URLは255文字以内で入力してください。',
    ],
    bottom_image_url => [
        'HTTP_URL' => '特集バナー画像URLが不正です。',
        'LENGTH'   => '特集バナー画像URLは255文字以内で入力してください。',
    ],
    bottom_link_url => [
        'HTTP_URL' => '特集バナーリンクURLが不正です。',
        'LENGTH'   => '特集バナーリンクURLは255文字以内で入力してください。',
    ],
    bottom_text => [
        'LENGTH' => '特集バナーテキストは1000文字以内で入力してください。',
    ],
]);

__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if $self->has_error;

        my $skin_module = Mixi::Skin::Touch::Admin->new;
        $self->stash->{skin_module}         = $skin_module;
        $self->stash->{edit_skin_count_map} = $skin_module->get_edit_skin_count();
        $self->stash->{mode} = $self->mode;

        if ($self->mode eq 'success') {
            $self->stash->{success_message} = SUCCEEDED_TO_SAVE_MESSAGE;
            $self->mode('main');
        }
    },
    -add_confirm => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');
<<<<<<< Updated upstream

        my $is_valid_submit = $self->conditions_submit('add');
        return FIXED unless $is_valid_submit;

        if (my $warnings = $self->has_warnings('add_submit')) {
=======
        use Data::Dumper;
        warn Dumper "come to add";
        if (my $warnings = $self->has_warnings('add')){
            warn Dumper "come to add error";
>>>>>>> Stashed changes
            $self->template->add_error($warnings);
            $self->mode('add');
        }
        return FIXED;
    },
    -add_commit => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');

        my $is_valid_submit = $self->conditions_submit('add');
        return FIXED unless $is_valid_submit;

        if (my $warnings = $self->has_warnings('add_submit')) {
            $self->template->add_error($warnings);
            $self->mode('add');
            return FIXED;
        }

        my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->add(
            tag_id           => $self->param->{tag_id},
            top_image_url    => $self->param->{top_image_url},
            bottom_image_url => $self->param->{bottom_image_url},
            bottom_link_url  => $self->param->{bottom_link_url},
            bottom_text      => $self->param->{bottom_text},
        );
        $self->alert(FAILED_TO_SAVE_MESSAGE) unless $result;

        return $self->redirect("list_character_top_banner.pl?mode=success");
    },
    -add_cancel => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');
        $self->conditions_submit('add');
        $self->mode('add');
        return FIXED;
    },
    -edit => sub {
        my $self = shift;
        return $self->alert if $self->has_error('edit');

        my $result = $self->conditions_banner_by_tag_id;
        return $self->alert unless $result;

        return FIXED;
    },
    -edit_confirm => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');
        $self->conditions_submit('edit');
        return FIXED;
    },
    -edit_commit => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');

        my $is_valid_submit = $self->conditions_submit('add');
        return FIXED unless $is_valid_submit;

        my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->edit(
            tag_id           => $self->param->{tag_id},
            top_image_url    => $self->param->{top_image_url},
            bottom_image_url => $self->param->{bottom_image_url},
            bottom_link_url  => $self->param->{bottom_link_url},
            bottom_text      => $self->param->{bottom_text},
        );
        $self->alert(FAILED_TO_SAVE_MESSAGE) unless $result;

        return $self->redirect("list_character_top_banner.pl?mode=success");
    },
    -edit_cancel => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');
        $self->conditions_submit('edit');
        $self->mode('edit');
        return FIXED;
    },
    -remove => sub {
        my $self = shift;
        return $self->alert if $self->has_error('remove_submit');

        my $result = $self->conditions_banner_by_tag_id;
        return $self->alert unless $result;

        return FIXED;

    },
    -remove_commit => sub {
        my $self = shift;
        return $self->alert if $self->has_error('postkey');
        return $self->alert if $self->has_error('remove_submit');

        my $result = Mixi::Skin::Touch::Store::CharacterTopBanner->remove(
            tag_id => $self->param->{tag_id},
        );
        $self->alert(FAILED_TO_SAVE_MESSAGE) unless $result;

        return $self->redirect("list_character_top_banner.pl?mode=success");
    },
);

__PACKAGE__->assign(
    add          => [\&assign_common, \&assign_banner, \&assign_is_tag_id_editable],
    add_confirm  => [\&assign_common, \&assign_banner],
    edit         => [\&assign_common, \&assign_banner],
    edit_confirm => [\&assign_common, \&assign_banner],
    remove       => [\&assign_common, \&assign_banner],
);

__PACKAGE__->templates(
    add          => 'touch/manage_character_top_banner_add.tmpl',
    add_confirm  => 'touch/manage_character_top_banner_add_confirm.tmpl',
    edit         => 'touch/manage_character_top_banner_edit.tmpl',
    edit_confirm => 'touch/manage_character_top_banner_edit_confirm.tmpl',
    remove       => 'touch/manage_character_top_banner_remove_confirm.tmpl',
);

sub conditions_submit {
    my ($self, $mode) = @_;

    my $is_valid_submit = 1;
    if (my $warnings = $self->has_warnings('submit')) {
        $self->template->add_error($warnings);
        $self->mode($mode);
        $is_valid_submit = 0;
    }

    $self->stash->{tag_id}           = $self->param->{tag_id};
    $self->stash->{top_image_url}    = $self->param->{top_image_url};
    $self->stash->{bottom_image_url} = $self->param->{bottom_image_url};
    $self->stash->{bottom_link_url}  = $self->param->{bottom_link_url};
    $self->stash->{bottom_text}      = $self->param->{bottom_text};

    return $is_valid_submit;
}

sub conditions_banner_by_tag_id {
    my $self = shift;

    my $banner = Mixi::Skin::Touch::Store::CharacterTopBanner->get(tag_id => $self->param->{tag_id});
    return 0 unless $banner;

    $self->stash->{tag_id}           = $banner->{tag_id},
    $self->stash->{top_image_url}    = $banner->{top_image_url},
    $self->stash->{bottom_image_url} = $banner->{bottom_image_url},
    $self->stash->{bottom_link_url}  = $banner->{bottom_link_url},
    $self->stash->{bottom_text}      = $banner->{bottom_text},

    return 1;
}

sub assign_common {
    my $self = shift;

    $self->template->param(
<<<<<<< Updated upstream
        postkey => $self->post_key->encode([qw/_ENV_REMOTE_USER_ _TIMESTAMP_/]),
    );
}

sub assign_banner {
    my $self = shift;

    $self->template->param(
        tag_id           => $self->stash->{tag_id},
        top_image_url    => $self->stash->{top_image_url},
        bottom_image_url => $self->stash->{bottom_image_url},
        bottom_link_url  => $self->stash->{bottom_link_url},
        bottom_text      => $self->stash->{bottom_text},
=======
        success_message => $self->stash->{success_message},
        mode            => $self->stash->{mode},
>>>>>>> Stashed changes
    );
}

sub assign_is_tag_id_editable {
    my $self = shift;

    $self->template->param(
        is_tag_id_editable => 1,
    );
}

<<<<<<< Updated upstream
sub validate_not_registered_tag_id {
    my ($validator, $tag_id) = @_;
    my $banner = Mixi::Skin::Touch::Store::CharacterTopBanner->get(tag_id => $tag_id);
    return !$banner ? 1 : 0;
=======
sub validate_duplicate_tag_id {
    my ($validator, $data) = @_;
    my $self = $validator->options->{self};

    my $old_tag_id = $self->stash->{tag_id};
    my $new_tag_id = $self->param->{tag_id};
    return 1 if $old_tag_id eq $new_tag_id;
    my $character_top_banner = Mixi::Skin::Touch::Store::CharacterTopBanner->get(tag_id => $tag_id);
    return $character_top_banner 1 ? 0;
>>>>>>> Stashed changes
}

1;
