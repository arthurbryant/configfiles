package Mixi::Skin::Touch::Controller::Apply;

use strict;
use warnings;
use utf8;

#::<<service>>
use Mixi::Service::Procedure::InternalGateway;

#::<<framework>>
use Mixi::Pages;
use Mixi::Config qw/URL_MIXI_PREFIX/;

#::<<application>>
use Mixi::Skin::Touch;
use Mixi::Skin::Touch::Purchase;
use Mixi::Skin::Config;

=encoding utf-8

=head1 NAME

 Mixi::Skin::Touch::Controller::Apply - touch版ミクコレ storeミクコレ検索

=head1 DESCRIPTION

  ミクコレ store ミクコレ設定完了画面
  決済後のコールバック先

=cut

#::CONSTANTS
use constant {
    # FIXME
    TITLE  => 'ミクコレ検索',
    FAIL_TO_SET_MESSAGE => "デザインの設定に失敗しました。時間をおいてもう一度お試しください。\n（※購入したデザインは無料で再設定することができます。）",
    FAIL_TO_CHARGE_MESSAGE => "決済処理に失敗しました。お手数ですが、もう一度最初からやり直してください。",
    CANCEL_REDIRECT_URL => '/list_touch_skin.pl',
};

__PACKAGE__->use_perlstring(1);
__PACKAGE__->auth_type(AUTH_REQUIRED);
__PACKAGE__->template_type([qw/user::touch user::pcsite/]);
__PACKAGE__->mode_param('status');
__PACKAGE__->initial_params(status => 'apply');

__PACKAGE__->validation(
    '_default' => [
        status => [['IN_ARRAY', qw/apply success cancel error/]],
    ],
    'apply' => [
        id => [['NOT_BLANK'], ['UINT']],
        post_key => [['NOT_BLANK'], ['POSTKEY', qw/_MEMBER_ID_ _TIMESTAMP_/]],
    ],
    'success' => [
        order_id => [['NOT_BLANK'], ['ASCII']],
    ],
);

sub _set_skin_stash {
    my ($self, $skin_id) = @_;
    return unless $skin_id;
    my $skin_module = Mixi::Skin::Touch->new;
    my $skin = $skin_module->get_skin(id => $skin_id);
    return unless ($skin && $skin_module->can_set_skin($skin));

    $self->stash->{skin_module} = $skin_module;
    $self->stash->{skin} = $skin;
    return 1;
}

sub _is_accessible_skin {
    my ($self, $skin) = @_;

    return 1 if $skin->{skin_type} != Mixi::Skin::Config::TOUCH_SKIN_TYPE->{DELUXE};

    my $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_member_id_and_product_id(
        member_id  => $self->member->{id},
        product_id => $skin->{id},
    );
    return $purchase_info ? 1 : 0;
}

__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if $self->has_error;

        return $self->redirect(URL_MIXI_PREFIX . 'list_skin.pl') unless $self->device->is_touch_screen;
    },

    -apply => sub {
        my $self = shift;
        return $self->alert if $self->has_error('apply');

        return $self->alert unless $self->_set_skin_stash($self->param->{id});

        my $skin = $self->stash->{skin};
        return $self->alert unless $self->_is_accessible_skin($skin);

        my $result = $self->stash->{skin_module}->set_member_skin(
            member_id => $self->member->{id},
            skin      => $skin,
        );
        return $self->alert(FAIL_TO_SET_MESSAGE) unless $result;

        return FIXED;
    },

    -success => sub {
        my $self = shift;
        return $self->alert if $self->has_error('success');

        my $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_order_id(
            order_id => $self->param->{order_id},
        );
        return $self->alert unless ($purchase_info && $purchase_info->{product_id});
        my $member_id = $self->member->{id};
        return $self->alert unless $member_id == $purchase_info->{member_id};

        my $skin_id = $purchase_info->{product_id};
        return $self->alert unless $self->_set_skin_stash($skin_id);

        my $result = $self->stash->{skin_module}->set_member_skin(
            member_id => $self->member->{id},
            skin      => $self->stash->{skin},
        );
        return $self->alert(FAIL_TO_SET_MESSAGE) unless $result;

        return FIXED;
    },

    -cancel => sub {
        my $self = shift;
        return $self->redirect(CANCEL_REDIRECT_URL);
    },

    -error => sub {
        my $self = shift;

        return $self->alert(FAIL_TO_CHARGE_MESSAGE);
    },
);

__PACKAGE__->templates(
    apply   => 'skin/apply.tmpl',
    success => 'skin/apply.tmpl',
);

__PACKAGE__->assign(
    apply   => [\&assign_main, \&assign_apply],
    success => [\&assign_main],
);


sub assign_main {
    my $self = shift;
    $self->template->set_title(TITLE);
    $self->template->param(
        id        => $self->stash->{skin}->{id},
        name      => $self->stash->{skin}->{name},
        skin_type => $self->stash->{skin}->{skin_type}, # free skin => 0
        now_point => $self->_get_point,
    );
}

sub assign_apply {
    my $self = shift;

    $self->template->param(is_purchased => 1);
}

sub _get_point {
    my $self  = shift;
    my $point = Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.payment.point.get', {
            requester_id => $self->member->{id},
        }
    );
    return $point->{point};
}

1;
