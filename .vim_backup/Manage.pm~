package Mixi::Skin::Touch::Controller::Manage;

use strict;
use warnings;
use utf8;

#::<<core library>>
use Nove::Core::Log;
use Nove::Core::Net::URI;

#::<<common library>>
use Mixi;

#::<<service>>
use Mixi::Service::Procedure::InternalGateway;

#::<<framework>>
use Mixi;
use Mixi::Pages;
use Mixi::Config qw/URL_MIXI_PREFIX/;

#::<<application>>
use Mixi::Skin::Touch::CPocket;

=encoding utf-8

=head1 NAME

 Mixi::Skin::Touch::Controller::Manage - touch版ミクコレ storeミクコレ検索

=head1 DESCRIPTION

  ミクコレ store 各ミクコレ詳細画面

=cut

#::CONSTANTS
use constant {
    TITLE  => 'mixiコレクション',
    FROM_PARAMETERS_FOR_REDIRECT => [
        'activity_feed', 'store_top' # TODO
    ],
    CHARACTER_TOP => "show_touch_skin_character.pl",
    APPLICATION_ID => 'jp.mixi.dev.touch',
    ORDER_FINISH_URL => URL_MIXI_PREFIX . 'apply_touch_skin.pl',
};

my %IS_FROM_PARAMETERS_FOR_REDIRECT = map { $_ => 1 } @{FROM_PARAMETERS_FOR_REDIRECT()};

__PACKAGE__->use_perlstring(1);
__PACKAGE__->auth_type(AUTH_REQUIRED);
__PACKAGE__->template_type([qw/user::touch user::pcsite /]);
__PACKAGE__->initial_params(mode => 'main');

__PACKAGE__->validation(
    '_default' => [
        id         => ['POSITIVEINT'], # skin id
        content_id => ['POSITIVEINT'],
        mode       => [['IN_ARRAY', qw/main apply/]],
        from       => [],
    ],
    'apply' => [
        post_key => [
            'NOT_BLANK',
            ['POSTKEY',qw/_MEMBER_ID_ _TIMESTAMP_/]
        ],
    ]
);

__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if $self->has_error;
        return $self->alert unless (
            $self->param->{content_id} || $self->param->{id}
        );

        unless ($self->device->is_touch_screen) {
            return $self->redirect(URL_MIXI_PREFIX . 'list_skin.pl');
        }

        my $skin_content_list = $self->_get_skin_content;
        unless ($skin_content_list) {
            Nove::Core::Log->debug('_get_skin_content failed');
            return $self->alert;
        }
        my $skin_content = $skin_content_list->{content_list}->[0]; # TODO: should refactor into CPocket.pm
        unless ($skin_content) {
            Nove::Core::Log->debug('content_list is empty');
            return $self->alert;
        }

        $self->stash->{skin_content} = $skin_content;
        $self->stash->{point}        = $self->_get_point;
    },

    -main => sub {
        my $self = shift;

        my $should_redirect = $IS_FROM_PARAMETERS_FOR_REDIRECT{$self->param->{from}};
        if ($should_redirect) {
            my $skin_content = $self->stash->{skin_content};
            my $tag_id = ($skin_content->{tags}->[0] || {})->{id};
            return FIXED unless $tag_id;

            my $content_id = $skin_content->{content_id};
            my $character_top_url = CHARACTER_TOP . "?tag_id=$tag_id&content_id=$content_id";
            return $self->redirect($character_top_url);
        }

        return FIXED;
    },

    -apply => sub {
        my $self = shift;
        return $self->alert if $self->has_error('apply');

        my $content_id = $self->stash->{skin_content}->{content_id};
        my $finish_url = Nove::Core::Net::URI->create_as_string(ORDER_FINISH_URL, {
            query_array => [
                content_id => $content_id,
            ],
        });
        my $result = $self->_create_order($content_id, $finish_url);
        return $self->alert unless $result;
        return $self->redirect($finish_url) unless (defined $result->{transaction_type});

        my $transaction_type = $result->{transaction_type};
        return $self->redirect($finish_url) if ($transaction_type eq 'settled');

        use Data::Dumper;
        warn Dumper $result;
        return $self->redirect($result->{transaction_url});
    },
);

__PACKAGE__->templates(
    main => 'skin/manage.tmpl',
);

__PACKAGE__->assign(
    main => [\&assign_common, \&assign_main],
);

sub _get_skin_content {
    my $self = shift;

    my $content_id = $self->param->{content_id};
    my $skin_id    = $self->param->{id};
    my $member_id  = $self->member->{id};

    if ($content_id) {
        return Mixi::Skin::Touch::CPocket->get_skin_content_by_content_id(
            member_id  => $member_id,
            content_id => $content_id,
        );
    }
    if ($skin_id) {
        return Mixi::Skin::Touch::CPocket->get_skin_content_by_skin_id(
            member_id => $member_id,
            skin_id   => $skin_id,
        );
    }
    return;
}


sub assign_common {
    my $self = shift;
    $self->template->set_title(TITLE);
}


sub assign_main {
    my $self  = shift;

    my $skin_content = $self->stash->{skin_content};
    my $point        = $self->stash->{point};

    $self->template->param(
        now_point      => $point->{point},
        post_key       => $self->post_key->encode([qw/_MEMBER_ID_ _TIMESTAMP_/]),
        can_buy        => ($skin_content->{price} && !$skin_content->{is_bought}),
        map {
            ( "$_" => $skin_content->{$_} )
        } keys %$skin_content, # TODO
    );
}

sub _get_point {
    my $self  = shift;
    my $point = Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.payment.point.get', {
            requester_id => $self->member->{id},
        }
    );
    return $point;
}

sub _create_order {
    my ($self, $content_id, $finish_url) = @_;

    return Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.cpocket.mixipayment.order.create' => {
            requester_id => $self->member->{id},
            params => {
                application_id => APPLICATION_ID,
                cart_details   => [
                    {
                        content_id => $content_id,
                        quantity   => 1,
                    }
                ],
                finish_url => $finish_url,
                device     => 'touch',
                is_sandbox => DEBUG(),
            },
        },
    );
}

1;
