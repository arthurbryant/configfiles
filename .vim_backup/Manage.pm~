package Mixi::Skin::Controller::Manage;
use strict;
use warnings;

#::<<common library>>
use Mixi::String qw/
    count_time
/;

#::<<framework>>
use Mixi::Pages;

#::<<application>>
use Mixi::Skin;
use Mixi::Skin::Config;

#::BAD-DEPENDENCIES
use Mixi::LastLogin;
use Mixi::Member::ProfileImage::MemberSingle;

#::CONSTANTS
use constant {
    _TITLE_ => 'ミクコレ設定',
};

__PACKAGE__->auth_type(AUTH_REQUIRED);
__PACKAGE__->initial_params(
    via_script_name => 'list_skin.pl',
);
__PACKAGE__->validation( 
    _default => [ 
        id  => [
            ['NOT_BLANK'],
            ['UINT'],
        ],
        via_script_name => [
            ['ASCII'],
        ],
    ],
    set_commit => [
        post_key => ['NOT_BLANK', [POSTKEY => qw/_MEMBER_ID_ _TIMESTAMP_/]]
    ],
    delete_commit => [
        post_key => ['NOT_BLANK', [POSTKEY => qw/_MEMBER_ID_ _TIMESTAMP_/]]
    ],
);
__PACKAGE__->templates( 
    delete_confirm => 'skin/delete_confirm.tmpl',
    delete_commit  => 'skin/delete_commit.tmpl',
    set_confirm    => 'skin/set_confirm.tmpl',
    set_commit     => 'skin/set_commit.tmpl',
);
__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if $self->has_error;
        my $member_id = $self->member->{id};
        $self->stash->{skin_module} = Mixi::Skin->get_instance();
        $self->stash->{member_skin} = $self->stash->{skin_module}->get_member_skin(member_id => $member_id);
    },
    -delete_confirm => sub {
        my $self = shift;
        return $self->alert if $self->has_error;
        return FIXED;
    },
    -delete_commit => sub {
        my $self = shift;
        return $self->alert if $self->has_error;
        return $self->alert unless $self->request->method eq 'POST';

        unless($self->param->{commit}){
            my $uri = URI->new('list_skin.pl');
            return $self->redirect($uri->as_string());
        }

        my $flag = $self->stash->{skin_module}->delete_member_skin(
            member_id => $self->member->{id},
        );

        return $self->alert unless $flag;
        return FIXED;
    },
    -set_confirm => sub {
        my $self = shift;
        return $self->alert if $self->has_error;

        $self->stash->{new_skin} = $self->stash->{skin_module}->get_skin(id => $self->param->{id});
        return $self->alert unless $self->stash->{new_skin};
        return $self->alert unless $self->stash->{skin_module}->can_set_skin($self->stash->{new_skin});

        my $via = $self->param->{via_script_name};
        $self->stash->{via_script_name} = $via if Mixi::Skin::Config::VIA_SCRIPT_NAMES->{$via};

        #skin preview
        $self->skin_id($self->stash->{new_skin}->{id});

        return FIXED;
    },
    -set_commit => sub {
        my $self = shift;
        return $self->alert if $self->has_error;
        return $self->alert unless $self->request->method eq 'POST';
        
        unless($self->param->{commit}){
            my $uri = URI->new('list_skin.pl');
            return $self->redirect($uri->as_string());
        }

        $self->stash->{new_skin} = $self->stash->{skin_module}->get_skin(id => $self->param->{id});
        return $self->alert unless $self->stash->{new_skin};
        return $self->alert unless $self->stash->{skin_module}->can_set_skin($self->stash->{new_skin});
    
        my $via = $self->param->{via_script_name};

        my $flag = $self->stash->{skin_module}->set_member_skin(
            skin            => $self->stash->{new_skin},
            member_id       => $self->member->{id},
            via_script_name => (defined $via && Mixi::Skin::Config::VIA_SCRIPT_NAMES->{$via}) ? $via : undef,
        );

        return $self->alert unless $flag;
        return FIXED;
    },
);
__PACKAGE__->assign(
    delete_confirm => [\&assign_default,\&assign_delete_confirm],
    delete_commit  => [\&assign_default,\&assign_delete_commit],
    set_confirm    => [\&assign_default,\&assign_set_confirm,\&assign_user_info,\&assign_preview_data],
    set_commit     => [\&assign_default,\&assign_set_commit],
);

sub assign_default {
    my $self = shift;
    $self->template->set_title(_TITLE_);
}

sub assign_delete_confirm {
    my $self = shift;

    $self->template->param(
        post_key => $self->post_key->encode([qw/_MEMBER_ID_ _TIMESTAMP_/]),
        map {
           ("skin_$_" =>  $self->stash->{member_skin}->{$_})
        } keys %{$self->stash->{member_skin}},
    );
}

sub assign_delete_commit {
    my $self = shift;

    $self->template->param(
        map {
           ("skin_$_" =>  $self->stash->{member_skin}->{$_})
        } keys %{$self->stash->{member_skin}},
    );

}

sub assign_set_confirm {
    my $self = shift;


    $self->template->param(
        via_script_name => $self->stash->{via_script_name},
        post_key => $self->post_key->encode([qw/_MEMBER_ID_ _TIMESTAMP_/]),
        map {
           ("skin_$_" =>  $self->stash->{new_skin}->{$_})
        } keys %{$self->stash->{new_skin}},
    );
}

sub assign_user_info {
    my $self = shift;
    my $member_id = $self->member->{id};

    $self->cache->fetchbase(
        {
            base_key => 'nickname',
            base_id  => $member_id 
        },
        {
            base_key => 'link_count',
            base_id  => $member_id 
        },
    );

    ## Last login
    my $last_login_time = Mixi::LastLogin->new->get_last_logins($member_id);

    my $pmember = Mixi::Member::ProfileImage::MemberSingle->new(
        member_id => $member_id,
        viewer_id => $member_id,
    );
    my $main_image = $pmember->find_main_image();
    $self->template->param(
        photo      => $main_image->url(),
        level_2    => $self->cache->get_link_count($member_id) || 0,
        nickname   => $self->cache->get_nickname($member_id),
        last_login => count_time($last_login_time ? ( time - $last_login_time ) : undef)
    );
}

sub assign_preview_data {
    my $self = shift;
    
    $self->template->param(%{ Mixi::Skin::Config::PREVIEW_DATA() });
}

sub assign_set_commit {
    my $self = shift;

    $self->template->param(
        map {
           ("skin_$_" => $self->stash->{new_skin}->{$_})
        } keys %{$self->stash->{new_skin}},
    );
}

1;
__END__

