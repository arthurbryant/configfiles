package Mixi::Skin::Touch::Controller::Manage;

use strict;
use warnings;
use utf8;


#::<<common library>>
use Mixi::String qw/
    count_time
/;

#::<<service>>
use Mixi::Service::Procedure::InternalGateway;

#::<<framework>>
use Mixi::Pages;
use Mixi::Config qw/URL_MIXI_PREFIX/;

#::<<application>>
use Mixi::Skin::Touch;
use Mixi::Skin::Config;
use Mixi::Skin::Touch::Purchase;

#::BAD-DEPENDENCIES
use Mixi::LastLogin;
use Mixi::Member::ProfileImage::MemberSingle;

=encoding utf-8

=head1 NAME

 Mixi::Skin::Touch::Controller::Manage - touch版ミクコレ storeミクコレ検索

=head1 DESCRIPTION

  ミクコレ store 各ミクコレ詳細画面

=cut

#::CONSTANTS
use constant {
    TITLE  => 'ミクコレ検索',
    PARAMS => {
        SERVICE              => 'basic_internal',
        SUB_SERVICE_ID       => 103,
        SUB_SERVICE_OWNER_ID => 'mixi',
        SELLER_ID            => 'mixi',
        USER_ORDER_ID        => 'dummy',
        FINISH_URL           => 'http://mixi.jp',
        ITEM_TYPE            => 'digital_item',
        PUCHASE_TYPE         => 'mixi',
        IS_SANDBOX           => 1,
        DEVICE               => 'touch',
        AUTO_SETTLEMENT      => 0,
        IGNORE_AUTHORIZATION => 1,
        AMOUNT               => 100, #有料ミクコレは100円のみなのでここに定義
        COUNT                => 1,   #複数購入不可なのでここで定義
    },
};

__PACKAGE__->use_perlstring(1);
__PACKAGE__->auth_type(AUTH_REQUIRED);
__PACKAGE__->template_type([qw/user::touch user::pcsite /]);

__PACKAGE__->validation_and_warnings(
    '_default' => [
        id => [
            'NOT_BLANK' => '',
            'UINT'      => '',
        ],
        mode => [
            ['IN_ARRAY', qw/main purchase/] => '',
        ],
    ],
);

__PACKAGE__->conditions(
    _prepare => sub {
        my $self = shift;
        return $self->alert if($self->has_error);

        if(!$self->device->is_touch_screen){
            return $self->redirect(URL_MIXI_PREFIX . 'list_skin.pl');
        }
        $self->stash->{point} = $self->_get_point;
    },

    -main => sub {
        my $self = shift;
        my $skin_module = Mixi::Skin::Touch->get_instance();

        my $new_skin = $skin_module->get_skin(
            id => $self->param->{id}
        );
        return $self->alert unless $new_skin;
        return $self->alert unless $skin_module->can_set_skin($new_skin);

        my $is_purchased = $self->_is_purchased($self->param->{id});

        $self->stash->{new_skin} = $new_skin;
        $self->stash->{is_purchased} = $is_purchased;

        return FIXED;
    },

    -purchase => sub {
        my $self = shift;
        my $skin_module = Mixi::Skin::Touch->get_instance();

        my $purchase_skin = $skin_module->get_skin(
            id => $self->param->{id}
        );
        return $self->alert unless $purchase_skin;
        return $self->alert unless $skin_module->can_set_skin($purchase_skin);
        return $self->alert unless $purchase_skin->{skin_type};

        my $is_purchased = $self->_is_purchased($self->param->{id});
        return $self->alert if $is_purchased;

        my $result = $self->_create_payment_segment($purchase_skin);
        return $self->alert unless $result;

        return $self->redirect($result->{result}->{transaction_url});
    },
);

__PACKAGE__->templates(
    main => 'skin/manage.tmpl',
);

__PACKAGE__->assign(
    main => [\&assign_common, \&assign_main],
);


sub assign_common {
    my $self = shift;
    $self->template->set_title(TITLE);
}


sub assign_main {
    my $self  = shift;
    my $point = $self->stash->{point};

    $self->template->param(
        %{ Mixi::Skin::Config::PREVIEW_DATA() },
        now_point      => $point->{point},
        can_view_point => $point->{is_success},
        is_purchased   => $self->stash->{is_purchased},
        post_key       => $self->post_key->encode([qw/_MEMBER_ID_ _TIMESTAMP_/]),
        map {
            ( "$_" => $self->stash->{new_skin}->{$_} )
        } keys %{$self->stash->{new_skin}},
    );
}

sub _get_point {
    my $self  = shift;
    my $point = Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.payment.point.get', {
            requester_id => $self->member->{id},
        }
    );
    return $point;
}

sub _is_purchased {
    my ($self, $skin_id) = @_;

    my $result = Mixi::Skin::Touch::Purchase->select_purchase_info_by_member_id_and_product_id(
        member_id  => $self->member->{id},
        product_id => $skin_id,
    );

    return defined $result ? 1 : 0;
}

sub _create_payment_segment {
    my ($self, $skin_info) = @_;

    my $result = Mixi::Service::Procedure::InternalGateway->call(
        'jp.mixi.payment.paymentsegment.client.ebisu.service.paytype.once.create' => {
            params => {
                service              => PARAMS->{SERVICE},
                sub_service_id       => PARAMS->{SUB_SERVICE_ID},
                sub_service_owner_id => PARAMS->{SUB_SERVICE_OWNER_ID},
                seller_id            => PARAMS->{SELLER_ID},
                extend_params        => {},
                finish_url           => PARAMS->{FINISH_URL},
                user_order_id   => PARAMS->{USER_ORDER_ID},
                usable_methods  => ['mixi_point'],
                item_type       => PARAMS->{ITEM_TYPE},
                purchaser_type  => PARAMS->{PUCHASE_TYPE},
                purchaser_id    => $self->member->{id},
                is_sandbox      => PARAMS->{IS_SANDBOX},
                items           => [{
                    sku_id => $skin_info->{id},
                    price  => PARAMS->{AMOUNT},
                    count  => PARAMS->{COUNT},
                    description => $skin_info->{name},
                }],
                title           => $skin_info->{name},
                amount          => PARAMS->{AMOUNT},
                device          => PARAMS->{DEVICE},
                auto_settlement => PARAMS->{AUTO_SETTLEMENT},
                memo            => '',
                memo_for_mixi   => '',
                method_params   => {},
                ignore_authorization => PARAMS->{IGNORE_AUTHORIZATION},
                commission_params => (),
            },
        },
    );
    return $result;
}

1;
