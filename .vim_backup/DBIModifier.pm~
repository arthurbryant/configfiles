package Nove::Core::DB::DBIModifier;
use strict;
use warnings;

use Data::Util;

use Nove::Core::Module::Loader;

our @EXPORT = qw/
    hook_interface
    hook_database
    hook_statement
/;

sub import {
    my ( $class,%options) = @_;
    my $package = caller;
    return __export_methods($package) if $options{-define};
    return __export_with($package);

}
sub __export_with {
    my ( $package ) = @_;
    Data::Util::install_subroutine( $package , 'dbi_with' => \&__dbi_with );
}
sub __export_methods {
    my ($package) = @_;
    for my $method (@EXPORT) {
        Data::Util::install_subroutine( $package, $method,
           __PACKAGE__->can($method));
    }
}

sub __dbi_with {
    my ($module) = @_;
    my $package = Nove::Core::Module::Loader->load_with_prefix( __PACKAGE__, $module );
    return unless $package->can('roles');
    for my $role ( @{ $package->roles } ){
        install_modified_subroutine( @$role );
    }
}
sub install_modified_subroutine{
    my ( $package,$name,$modifier,$hooks ) = @_;
    my $code_ref = Data::Util::get_code_ref( $package,$name);
    return unless $code_ref;
    __install_back($package,$name, $code_ref,__modifiy_method($code_ref,$modifier,$hooks));
}

sub __install_back {
    my ( $package, $method,$original, $modified_method ) = @_;
    no warnings 'redefine';
    Data::Util::install_subroutine( $package, $method, $modified_method );
}

sub __modifiy_method {
    my ( $target, $modifier, $hooks ) = @_;
    return Data::Util::modify_subroutine( $target => $modifier => $hooks );
}


sub __push_roles_to_package {
    my ( $package,$role ) = @_;
    no strict 'refs';
    no warnings 'redefine';
    my $full_name = $package . '::roles';
    unless($package->can('roles')){
        *{$full_name} = sub{[]};
    }
    my $roles = $package->roles;
    push @$roles , $role;
    *{$full_name} = sub{$roles};
}


sub hook_interface {
    my ( $modifier, $method, $hooks ) = @_;
    my $package = caller;
    __push_roles_to_package( $package,
        [ 'DBI', $method, $modifier, $hooks ] );
}

sub hook_database {
    my ( $modifier, $method, $hooks ) = @_;
    my $package = caller;
    __push_roles_to_package( $package,
        [ 'DBI::db', $method, $modifier, $hooks ] );

}

sub hook_statement {
    my ( $modifier, $method, $hooks ) = @_;
    my $package = caller;
    __push_roles_to_package( $package,
        [ 'DBI::st', $method, $modifier, $hooks ] );
}


1;
