package Mixi::Skin::Touch::Purchase;

use strict;
use warnings;
use base qw/Class::Accessor::Fast/;

#::<<other>>
use Params::Validate;

#::<<core library>>
use Nove::Core::Log;

#::<<common library>>
use Mixi;
use Mixi::Exception qw/throw/;
use Mixi::Assertion;

#::<<application>>
use Mixi::Skin::Touch::DB::Purchase;
use Mixi::Skin::Touch::Collection;

=encoding utf-8

=head name

 Mixi::Skin::Touch::Purchase touchミクコレ購入者情報

=head1 DESCTIPRION

 touch版ミクコレの購入者情報周りで使用するモデル層

=cut

=head1 METHODS

 insert_purchase_info
 select_purchase_info_by_member_id
 select_purchase_info_by_member_id_and_product_id

=cut

=head2 $result = Mixi::Skin::Touch::Purchase->insert_purchase_info(%args);

 購入者情報を追加する.

 INPUT
    order_id    => hogehoge 決済ID　必須
    product_id  => 12345    プロダクトID(skin_id)　必須
    member_id   => 12345    mixiのmember_id　必須
    purchase_at => 2013-07-11 10:00:00 購入日時　必須

 OUTPUT
    成功時：1
    失敗時：2

=cut

sub insert_purchase_info {
    my $self = shift;
    my $result;

    my %params = Params::Validate::validate(@_, {
        order_id    => { type => Params::Validate::SCALAR, },
        product_id  => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
        member_id   => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
        purchase_at => {
            type => Params::Validate::SCALAR,
            regex => qr/\A\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\z/,
        },
    });

    my $db = Mixi::Skin::Touch::DB::Purchase->new( { role => 'master' } );
    eval {
        $result = $db->insert_purchase_info(
            order_id    => $params{order_id},
            product_id  => $params{product_id},
            member_id   => $params{member_id},
            purchase_at => $params{purchase_at},
        );
    };

    if($@) {
        my $message = $@;
        Nove::Core::Log->error(
            sprintf('insert purchase info error: message = %s order_id = %s',
                $message, $params{order_id}
            )
        );
        return 0;
    }
    return $result;
}

=head2 $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_member_id(%args);

    1件のmember_idを元に 購入情報をすべて取得

    INPUT
        member_id => 12345 mixiのmember_id　必須

    OUTPUT
        成功時：購入情報を含むコレクションを返す
        失敗時：undef

=cut

sub select_purchase_info_by_member_id {
    my $self = shift;

    my %params = Params::Validate::validate( @_,{
        member_id => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
    });

    my $db = Mixi::Skin::Touch::DB::Purchase->new( { role => 'slave' } );

    my $rows = $db->select_purchase_info_by_member_id(
        member_id => $params{member_id},
    );

    my $collection = Mixi::Skin::Touch::Collection->new({
        'content' => [map {
            $self->new($_)
        } @$rows],
    });
    return $collection;
}

=head2 $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_member_id_and_product_id(%args);

    1件のmeber_idとproduct_idを元に 1件の購入情報を取得

    INPUT
        member_id => 12345 mixiのmember_id　必須
        prduct_id => 12345 プロダクトID(skin_id)　必須

    OUTPUT
        購入情報を含むハッシュリファレンス
        失敗した場合はundef

=cut

sub select_purchase_info_by_member_id_and_product_id {
    my $self = shift;

    my %params = Params::Validate::validate(@_, {
        member_id  => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
        product_id => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
    });

    my $db = Mixi::Skin::Touch::DB::Purchase->new( { role => 'slave' } );

    my $row = $db->select_purchase_info_by_member_id_and_product_id(
        member_id  => $params{member_id},
        product_id => $params{product_id},
    );
    return $row;
}

=head2 $purchase_info = Mixi::Skin::Touch::Purchase->select_purchase_info_by_order_id(%args);

    1件のorder_idを元に 購入情報をすべて取得

    INPUT
        order_id => 12345 ebisuの決済ID 必須

    OUTPUT
        成功時：購入情報を含むコレクションを返す
        失敗時：undef

=cut

sub select_purchase_info_by_order_id {
    my $self = shift;

    my %params = Params::Validate::validate( @_,{
        order_id => { type => Params::Validate::SCALAR, regex => qr/\A\d+\z/ },
    });

    my $db = Mixi::Skin::Touch::DB::Purchase->new( { role => 'slave' } );

    my $rows = $db->select_purchase_info_by_order_id(
        order_id => $params{order_id},
    );

    my $collection = Mixi::Skin::Touch::Collection->new({
        'content' => [map {
            $self->new($_)
        } @$rows],
    });
    return $collection;
}

1;
