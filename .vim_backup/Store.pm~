package Mixi::Skin::Touch::DB::Store;
use strict;
use Mixi::Warnings;
use utf8;
use parent 'Class::Accessor::Fast';

use Mixi::Config qw(
    DB_TOUCHSKIN_STORE_MST
    DB_TOUCHSKIN_STORE_SLV
    DB_TOUCHSKIN_STORE_BAK
);
use Nove::Core::DB::Handler;
use Nove::Core::DB::DSNResolver::MasterSlave;

__PACKAGE__->mk_ro_accessors(qw/connection/);

sub new {
    my $class = shift;

    my $resolver = Nove::Core::DB::DSNResolver::MasterSlave->new({
        master => DB_TOUCHSKIN_STORE_MST,
        slave  => DB_TOUCHSKIN_STORE_SLV,
        backup => DB_TOUCHSKIN_STORE_BAK,
    });

    my $connection = Nove::Core::DB::Handler->new({
        resolver => $resolver,
        charset  => 'utf8',
        want_utf8_flaged_result => 1,
    })->handle(@_);

    $class->SUPER::new({
        connection => $connection,
    })
}

sub begin {
    my $self = shift;
    $self->connection->begin;
}

sub end {
    my $self = shift;
    $self->connection->end;
}

sub rollback {
    my $self = shift;
    $self->connection->rollback;
}

sub select_pickup_list {
    my $self = shift;

    return $self->connection->select_all(q(
        SELECT content_id
        FROM store_pickup
        ORDER BY position
    ));
}

sub insert_pickup_list {
    my ($self, $params) = @_;

    my $values = join(',', ('(?,?)') x scalar(@$params));
    return $self->connection->execute(qq(
        INSERT INTO store_pickup (position, content_id)
        VALUES $values
    ), map { ($_->{position}, $_->{content_id}) } @$params);
}

sub delete_pickup_list {
    my $self = shift;

    return $self->connection->execute(q(
        DELETE FROM store_pickup
    ));
}

sub select_top_banner_list {
    my $self = shift;

    my $result = $self->connection->select_all(q(
        SELECT *
        FROM store_top_banner
        ORDER BY id
    ));
    return $result;
}

sub insert_top_banner {
    my ($self, %params) = @_;

    return $self->connection->execute(qq(
        INSERT INTO store_top_banner
        (link_url, image_url) VALUES (?,?)
    ), @params{qw/link_url image_url/});

}

sub delete_top_banner {
    my ($self, %params) = @_;

    return $self->connection->execute(qq(
        DELETE FROM store_top_banner
        WHERE id = ?
    ), $params{id});
}

sub select_character_top_banner_list {
    my ($self, %params) = @_;

    my $result = $self->connection->select_all(qq(
        SELECT *
        FROM store_character_top_banner
        ORDER BY tag_id
    ));
    return $result;
}

sub select_character_top_banner_by_tag_id {
    my ($self, %params) = @_;

    my $result = $self->connection->select_row(qq(
        SELECT *
        FROM store_character_top_banner
        WHERE tag_id = ?
    ), $params{tag_id});
    return $result;
}

sub insert_character_top_banner {
    my ($self, %params) = @_;

    my $result = $self->connection->execute(qq(
        INSERT INTO store_character_top_banner
        (tag_id, top_image_url, bottom_image_url, bottom_link_url, bottom_text) VALUES (?,?,?,?,?)
    ), @params{qw/tag_id top_image_url bottom_image_url bottom_link_url bottom_text/});
    return $result;
}

sub update_character_top_banner {
    my ($self, %params) = @_;

    my $result = $self->connection->execute(qq(
        UPDATE store_character_top_banner
        SET top_image_url = ?, bottom_image_url = ?, bottom_link_url = ?, bottom_text = ?
        WHERE tag_id = ?
    ), @params{qw/ top_image_url bottom_image_url bottom_link_url bottom_text tag_id /});
    return $result;
}

sub delete_top_banner {
    my ($self, %params) = @_;

    return $self->connection->execute(qq(
        DELETE FROM store_character_top_banner
        WHERE tag_id = ?
    ), $params{tag_id});
}

1;
